<program>      -> <body_program>
<declaration_var> -> <type> ID <dec>
<declaration_func> -> <type> ID <body_func> 
<assign> -> ID = <value> <multiple_assign> ;
<func_call> -> ID ( <parameters_used> ) ;
<command> -> cin >> ID <multiple_cin>;
<command> -> cout << <value> <multiple_cout> ;
<command> -> return <value> ;
<command> -> if ( <value> ) { <body } <else>


		<command> -> for ( ;  ; )

<else> else { <body> }
<else> e

<multiple_cin> -> >> ID <multiple_cin>
<multiple_cin> -> e

<multiple_cout> -> << <value> <multiple_cout>
<multiple_cout> e 

<multiple_assign> -> = ID <multiple_assign>
<multiple_assign> -> e

<dec> -> ; 
<dec> -> = <value> ;

<body_func> -> ( <parameters> ) <func>
<func> -> ;
<func> -> { <body> }

<type> -> int
<type> -> double
<type> -> auto
<type> -> string

<value> -> string 
<value> -> ID( <parameters_used> ) 
<value> -> expression 

<parameters>   -> <type> ID <parameters_n>
<parameters>   -> e
<parameters_n> -> , <type> ID <parameters_n>
<parameters_n> -> e

<parameters_used> -> ID <parameters_used_n>
<parameters_used> -> e
<parameters_used_n> -> , ID <parameters_used_n>
<parameters_used_n> -> e


<body> -> <command> <body>
<body> -> <func_call> <body>
<body> -> <assign> <body>
<body> -> <declaration_var> <body>
<body> -> e

<body_program> -> <declaration_func> <body_program>
<body_program> -> e
