<program> -> <body_program>
<declaration_var> -> <type> ID <dec>
<declaration_func> -> <type> ID <body_func> 
<assign> -> ID = value <multiple_assign> ;
<func_call> -> ID ( <parameters_used> ) ;
<command> -> cin >> value <multiple_cin> ;
<command> -> cout << value <multiple_cout> ;
<command> -> return value ;
<command> -> if ( value ) { <body> } <else> 
<command> -> for ( <for_def> ; value ; <for_assign> ) { <body> }
<command> -> length ( value ) ;
<command> -> substr ( value , value , value ) ;
<command> -> concat ( value , value ) ;
<command> -> find ( value , value ) ;
<command> -> sort ( value ) ;

<for_assign> -> ID = value
<for_def> -> <type> ID <for_a>
<for_a> -> = value
<for_a> -> $

<else> else { <body> }
<else> $
<multiple_cin> -> >> value <multiple_cin>
<multiple_cin> -> $

<multiple_cout> -> << value <multiple_cout>
<multiple_cout> $

<multiple_assign> -> = ID <multiple_assign>
<multiple_assign> -> $

<dec> -> ; 
<dec> -> = value ;

<body_func> -> ( <parameters> ) <func>
<func> -> ;
<func> -> { <body> }

<type> -> int
<type> -> double
<type> -> auto
<type> -> string

<func_val> -> ID ( <parameters_used> ) 

<parameters>   -> <type> ID <parameters_n>
<parameters>   -> $
<parameters_n> -> , <type> ID <parameters_n>
<parameters_n> -> $

<parameters_used> -> value <parameters_used_n>
<parameters_used> -> $
<parameters_used_n> -> , value
<parameters_used_n> -> $


<body> -> <command> <body>
<body> -> <func_call> <body>
<body> -> <assign> <body>
<body> -> <declaration_var> <body>
<body> -> $

<body_program> -> <declaration_func> <body_program>
<body_program> -> $
